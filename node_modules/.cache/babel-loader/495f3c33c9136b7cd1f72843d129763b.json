{"ast":null,"code":"import _slicedToArray from\"E:/web programming/react-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,Fragment}from'react';import ReactFlow,{addEdge,Background,Controls,MiniMap}from'react-flow-renderer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var initialElements=[{id:'1',type:'input',data:{label:'Mind Node'},position:{x:0,y:0}}];var onLoad=function onLoad(reactFlowInstance){reactFlowInstance.fitView();};var MindNode=function MindNode(){var _useState=useState(initialElements),_useState2=_slicedToArray(_useState,2),elements=_useState2[0],setElements=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),name=_useState4[0],setName=_useState4[1];var addNode=function addNode(){setElements(function(e){return e.concat({id:(e.length+1).toString(),data:{label:\"\".concat(name)},position:{x:Math.random()*window.innerWidth,y:Math.random()*window.innerHeight}});});};var onConnect=function onConnect(params){return setElements(function(e){return addEdge(params,e);});};return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsxs(ReactFlow,{elements:elements,onLoad:onLoad,style:{width:'100%',height:'90vh'},onConnect:onConnect,connectionLineStyle:{stroke:\"#ddd\",strokeWidth:2},connectionLineType:\"bezier\",snapToGrid:true,snapGrid:[16,16],children:[/*#__PURE__*/_jsx(Background,{color:\"#888\",gap:16}),/*#__PURE__*/_jsx(MiniMap,{nodeColor:function nodeColor(n){if(n.type==='input')return'blue';return'#FFCC00';}}),/*#__PURE__*/_jsx(Controls,{})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",onChange:function onChange(e){return setName(e.target.value);},name:\"title\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:addNode,children:\"Add Node\"})]})]});};export default MindNode;","map":{"version":3,"sources":["E:/web programming/react-demo/src/components/node.components.jsx"],"names":["React","useState","Fragment","ReactFlow","addEdge","Background","Controls","MiniMap","initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","MindNode","elements","setElements","name","setName","addNode","e","concat","length","toString","Math","random","window","innerWidth","innerHeight","onConnect","params","width","height","stroke","strokeWidth","n","target","value"],"mappings":"oJAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,QAA1B,KAA0C,OAA1C,CAEA,MAAOC,CAAAA,SAAP,EAAoBC,OAApB,CAA6BC,UAA7B,CAAyCC,QAAzC,CAAmDC,OAAnD,KAAkE,qBAAlE,C,wFAEA,GAAMC,CAAAA,eAAe,CAAG,CACpB,CAAEC,EAAE,CAAE,GAAN,CAAWC,IAAI,CAAE,OAAjB,CAA0BC,IAAI,CAAE,CAAEC,KAAK,CAAE,WAAT,CAAhC,CAAwDC,QAAQ,CAAE,CAAEC,CAAC,CAAE,CAAL,CAAQC,CAAC,CAAE,CAAX,CAAlE,CADoB,CAAxB,CAGA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,iBAAD,CAAuB,CAClCA,iBAAiB,CAACC,OAAlB,GACH,CAFD,CAIA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CAEnB,cAAgClB,QAAQ,CAACO,eAAD,CAAxC,wCAAOY,QAAP,eAAiBC,WAAjB,eACA,eAAwBpB,QAAQ,CAAC,EAAD,CAAhC,yCAAOqB,IAAP,eAAaC,OAAb,eAEA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CAClBH,WAAW,CAAC,SAAAI,CAAC,QAAIA,CAAAA,CAAC,CAACC,MAAF,CAAS,CACtBjB,EAAE,CAAE,CAACgB,CAAC,CAACE,MAAF,CAAW,CAAZ,EAAeC,QAAf,EADkB,CAEtBjB,IAAI,CAAE,CAAEC,KAAK,WAAKU,IAAL,CAAP,CAFgB,CAGtBT,QAAQ,CAAE,CAAEC,CAAC,CAAEe,IAAI,CAACC,MAAL,GAAgBC,MAAM,CAACC,UAA5B,CAAwCjB,CAAC,CAAEc,IAAI,CAACC,MAAL,GAAgBC,MAAM,CAACE,WAAlE,CAHY,CAAT,CAAJ,EAAF,CAAX,CAKH,CAND,CAQA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,MAAD,QAAYd,CAAAA,WAAW,CAAC,SAAAI,CAAC,QAAIrB,CAAAA,OAAO,CAAC+B,MAAD,CAASV,CAAT,CAAX,EAAF,CAAvB,EAAlB,CAEA,mBACI,MAAC,QAAD,yBACI,MAAC,SAAD,EACI,QAAQ,CAAEL,QADd,CAEI,MAAM,CAAEJ,MAFZ,CAGI,KAAK,CAAE,CAAEoB,KAAK,CAAE,MAAT,CAAiBC,MAAM,CAAE,MAAzB,CAHX,CAII,SAAS,CAAEH,SAJf,CAKI,mBAAmB,CAAE,CAAEI,MAAM,CAAE,MAAV,CAAkBC,WAAW,CAAE,CAA/B,CALzB,CAMI,kBAAkB,CAAC,QANvB,CAOI,UAAU,CAAE,IAPhB,CAQI,QAAQ,CAAE,CAAC,EAAD,CAAK,EAAL,CARd,wBAUI,KAAC,UAAD,EACI,KAAK,CAAC,MADV,CAEI,GAAG,CAAE,EAFT,EAVJ,cAcI,KAAC,OAAD,EACI,SAAS,CAAE,mBAAAC,CAAC,CAAI,CACZ,GAAIA,CAAC,CAAC9B,IAAF,GAAW,OAAf,CAAwB,MAAO,MAAP,CAExB,MAAO,SAAP,CACH,CALL,EAdJ,cAoBI,KAAC,QAAD,IApBJ,GADJ,cAwBI,oCACI,cAAO,IAAI,CAAC,MAAZ,CACI,QAAQ,CAAE,kBAAAe,CAAC,QAAIF,CAAAA,OAAO,CAACE,CAAC,CAACgB,MAAF,CAASC,KAAV,CAAX,EADf,CAEI,IAAI,CAAC,OAFT,EADJ,cAII,eACI,IAAI,CAAC,QADT,CAEI,OAAO,CAAElB,OAFb,sBAJJ,GAxBJ,GADJ,CAoCH,CAnDD,CAqDA,cAAeL,CAAAA,QAAf","sourcesContent":["import React, { useState, Fragment } from 'react';\r\n\r\nimport ReactFlow, { addEdge, Background, Controls, MiniMap } from 'react-flow-renderer';\r\n\r\nconst initialElements = [\r\n    { id: '1', type: 'input', data: { label: 'Mind Node' }, position: { x: 0, y: 0 } }\r\n]\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst MindNode = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length + 1).toString(),\r\n            data: { label: `${name}` },\r\n            position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n        }));\r\n    };\r\n\r\n    const onConnect = (params) => setElements(e => addEdge(params, e));\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n                <Background\r\n                    color=\"#888\"\r\n                    gap={16}\r\n                />\r\n                <MiniMap\r\n                    nodeColor={n => {\r\n                        if (n.type === 'input') return 'blue';\r\n\r\n                        return '#FFCC00'\r\n                    }} />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            <div>\r\n                <input type=\"text\"\r\n                    onChange={e => setName(e.target.value)}\r\n                    name=\"title\" />\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={addNode}\r\n                >Add Node</button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MindNode;"]},"metadata":{},"sourceType":"module"}