{"ast":null,"code":"var _jsxFileName = \"E:\\\\web programming\\\\react-demo\\\\src\\\\components\\\\node.components.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Fragment } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap } from 'react-flow-renderer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialElements = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'Mind Node'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}];\n\nconst onLoad = reactFlowInstance => {\n  reactFlowInstance.fitView();\n};\n\nconst MindNode = () => {\n  _s();\n\n  const [elements, setElements] = useState(initialElements);\n  const [name, setName] = useState(\"\");\n\n  const addNode = () => {\n    setElements(e => e.concat({\n      id: (e.length + 1).toString(),\n      data: {\n        label: `${name}`\n      },\n      position: {\n        x: Math.random() * window.innerWidth,\n        y: Math.random() * window.innerHeight\n      }\n    }));\n  };\n\n  const onConnect = params => setElements(e => addEdge(params, e));\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onLoad: onLoad,\n      style: {\n        width: '100%',\n        height: '90vh'\n      },\n      onConnect: onConnect,\n      connectionLineStyle: {\n        stroke: \"#ddd\",\n        strokeWidth: 2\n      },\n      connectionLineType: \"bezier\",\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#888\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: n => {\n          if (n.type === 'input') return 'blue';\n          return '#FFCC00';\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setName(e.target.value),\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MindNode, \"m1VSeBNMC6mnc/JQHwLwM3dmmeE=\");\n\n_c = MindNode;\nexport default MindNode;\n\nvar _c;\n\n$RefreshReg$(_c, \"MindNode\");","map":{"version":3,"sources":["E:/web programming/react-demo/src/components/node.components.jsx"],"names":["React","useState","Fragment","ReactFlow","addEdge","Background","Controls","MiniMap","initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","MindNode","elements","setElements","name","setName","addNode","e","concat","length","toString","Math","random","window","innerWidth","innerHeight","onConnect","params","width","height","stroke","strokeWidth","n","target","value"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\r\n\r\nimport ReactFlow, { addEdge, Background, Controls, MiniMap } from 'react-flow-renderer';\r\n\r\nconst initialElements = [\r\n    { id: '1', type: 'input', data: { label: 'Mind Node' }, position: { x: 0, y: 0 } }\r\n]\r\nconst onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst MindNode = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [name, setName] = useState(\"\")\r\n\r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length + 1).toString(),\r\n            data: { label: `${name}` },\r\n            position: { x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight }\r\n        }));\r\n    };\r\n\r\n    const onConnect = (params) => setElements(e => addEdge(params, e));\r\n\r\n    return (\r\n        <Fragment>\r\n            <ReactFlow\r\n                elements={elements}\r\n                onLoad={onLoad}\r\n                style={{ width: '100%', height: '90vh' }}\r\n                onConnect={onConnect}\r\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\r\n                connectionLineType=\"bezier\"\r\n                snapToGrid={true}\r\n                snapGrid={[16, 16]}\r\n            >\r\n                <Background\r\n                    color=\"#888\"\r\n                    gap={16}\r\n                />\r\n                <MiniMap\r\n                    nodeColor={n => {\r\n                        if (n.type === 'input') return 'blue';\r\n\r\n                        return '#FFCC00'\r\n                    }} />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            <div>\r\n                <input type=\"text\"\r\n                    onChange={e => setName(e.target.value)}\r\n                    name=\"title\" />\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={addNode}\r\n                >Add Node</button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MindNode;"]},"metadata":{},"sourceType":"module"}